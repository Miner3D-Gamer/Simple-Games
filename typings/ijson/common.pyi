"""
This type stub file was generated by pyright.
"""

from ijson import utils

"""
This type stub file was generated by pyright.
"""
class JSONError(Exception):
    '''
    Base exception for all parsing errors.
    '''
    ...


class IncompleteJSONError(JSONError):
    '''
    Raised when the parser can't read expected data from a stream.
    '''
    ...


@utils.coroutine
def parse_basecoro(target):
    '''
    A coroutine dispatching parsing events with the information about their
    location with the JSON object tree. Events are tuples
    ``(prefix, type, value)``.

    Available types and values are:

    ('null', None)
    ('boolean', <True or False>)
    ('number', <int or Decimal>)
    ('string', <unicode>)
    ('map_key', <str>)
    ('start_map', None)
    ('end_map', None)
    ('start_array', None)
    ('end_array', None)

    Prefixes represent the path to the nested elements from the root of the JSON
    document. For example, given this document::

        {
          "array": [1, 2],
          "map": {
            "key": "value"
          }
        }

    the parser would yield events:

      ('', 'start_map', None)
      ('', 'map_key', 'array')
      ('array', 'start_array', None)
      ('array.item', 'number', 1)
      ('array.item', 'number', 2)
      ('array', 'end_array', None)
      ('', 'map_key', 'map')
      ('map', 'start_map', None)
      ('map', 'map_key', 'key')
      ('map.key', 'string', u'value')
      ('map', 'end_map', None)
      ('', 'end_map', None)

    '''
    ...

class ObjectBuilder:
    '''
    Incrementally builds an object from JSON parser events. Events are passed
    into the `event` function that accepts two parameters: event type and
    value. The object being built is available at any time from the `value`
    attribute.

    Example::

        >>> from io import BytesIO
        >>> from ijson import basic_parse
        >>> from ijson.common import ObjectBuilder

        >>> builder = ObjectBuilder()
        >>> f = BytesIO(b'{"key": "value"}')
        >>> for event, value in basic_parse(f):
        ...     builder.event(event, value)
        >>> builder.value == {'key': 'value'}
        True

    '''
    def __init__(self, map_type=...) -> None:
        ...
    
    def event(self, event, value):
        ...
    


@utils.coroutine
def items_basecoro(target, prefix, map_type=...):
    '''
    An couroutine dispatching native Python objects constructed from the events
    under a given prefix.
    '''
    ...

@utils.coroutine
def kvitems_basecoro(target, prefix, map_type=...):
    '''
    An coroutine dispatching (key, value) pairs constructed from the events
    under a given prefix. The prefix should point to JSON objects
    '''
    ...

def integer_or_decimal(str_value):
    '''
    Converts string with a numeric value into an int or a Decimal.
    Used in different backends for consistent number representation.
    '''
    ...

def integer_or_float(str_value):
    '''
    Converts string with a numeric value into an int or a float.
    Used in different backends for consistent number representation.
    '''
    ...

def number(str_value):
    ...

def file_source(f, buf_size=...):
    '''A generator that yields data from a file-like object'''
    ...

def is_awaitablefunction(func):
    """True if `func` is an awaitable function"""
    ...

def is_async_file(f):
    """True if `f` has an asynchronous `read` method"""
    ...

def is_file(x):
    """True if x has a `read` method"""
    ...

def is_iterable(x):
    """True if x can be iterated over"""
    ...

_common_functions_warn = ...
def parse(events):
    """Like ijson.parse, but takes events generated via ijson.basic_parse instead
    of a file"""
    ...

def kvitems(events, prefix, map_type=...):
    """Like ijson.kvitems, but takes events generated via ijson.parse instead of
    a file"""
    ...

def items(events, prefix, map_type=...):
    """Like ijson.items, but takes events generated via ijson.parse instead of
    a file"""
    ...

def enrich_backend(backend):
    '''
    Provides a backend with any missing coroutines/generators/async-iterables
    it might be missing by using the generic ones written in python.
    '''
    ...

